#include"../ora2016/stdafx.h"
#include"oradll.h"


#pragma comment(lib,".\\orasql11.lib")
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
}
#endif

char mm[4096];
EXEC SQL BEGIN DECLARE SECTION;
	char	dyn_stat[1024];
	EXEC SQL VAR dyn_stat IS STRING(1024);
EXEC SQL END DECLARE SECTION;

SQLDA *select_dp,*bind_dp;
#define MAX_ITEMS			40
#define	MAX_VNAME_LEN		30
#define	MAX_INAME_LEN		30
void free_dp()
{
	int i;
    for (i = 0; i < MAX_ITEMS; i++)
    {    
        if (bind_dp->V[i] != (char *) 0)
            free(bind_dp->V[i]);
        free(bind_dp->I[i]);   /* MAX_ITEMS were allocated. */
        if (select_dp->V[i] != (char *) 0)
            free(select_dp->V[i]);
        free(select_dp->I[i]); /* MAX_ITEMS were allocated. */
    }
    /* Free space used by the descriptors themselves. */
    SQLSQLDAFree( SQL_SINGLE_RCTX, bind_dp);
    SQLSQLDAFree( SQL_SINGLE_RCTX, select_dp);
};
void sql_error(char *msg)
{
 printf("%s\n%s\n", msg,(char *)sqlca.sqlerrm.sqlerrmc);
 free_dp();
 EXEC SQL ROLLBACK RELEASE;
 exit(0);
};
int alloc_desc(int size,int max_vname_len,int max_iname_len);
void set_bind_v();
void set_select_v();
//这也是首个测试proc使用"select * from..."方法的函数
_declspec(dllexport) int WINAPI get_counts(void *vd)
{
	AFX_MANAGE_STATE(AfxGetStaticModuleState());
	EXEC SQL BEGIN DECLARE SECTION;
	char uname[20],pwd[20],dbname[60],conn[1024],res[5][100];
	EXEC SQL END DECLARE SECTION;
	int i,j;
	CString str,fname,s1,s2;
	_tagbas *tb=(_tagbas*)vd;
	memset((void*)&uname,0,sizeof(uname));
	memset((void*)&pwd,0,sizeof(pwd));
	memset((void*)&dbname,0,sizeof(dbname));
	memset((void*)&conn,0,sizeof(conn)); //like "select count(*) from user_tab_columns where table_name ="
	for(i=0;i<5;i++)
		memset((void*)&res[i],0,100);
	memcpy((void*)&uname,tb->uname,strlen(tb->uname));
	memcpy((void*)&pwd,tb->pwd,strlen(tb->pwd));
	memcpy((void*)&dbname,tb->dbname,strlen(tb->dbname));
	memcpy((void*)&conn,tb->conn,sizeof(tb->conn));
	fname.Format(tb->fname);//文件名，由于要导出的数据量可能很大，所以数据不往主程序传送了，直接保存进文件
	EXEC SQL CONNECT :uname IDENTIFIED BY :pwd USING :dbname;
	if(sqlca.sqlcode<0)
	{
		str.Format(_T("errno: %ld %s"),sqlca.sqlcode,(CString)(sqlca.sqlerrm.sqlerrmc));
		MessageBox(NULL,str,"ora02.dll",0);
		return -1;
	}
	if(alloc_desc(MAX_ITEMS,MAX_VNAME_LEN,MAX_INAME_LEN)==1)
		sql_error("alloc error");
//	_snprintf(conn,1024,"SELECT COUNT(*) FROM USER_TAB_COLUMNS WHERE TABLE_NAME = '%s'","TEST01");
	EXEC SQL PREPARE sqlconn FROM :conn;
	if(sqlca.sqlcode<0)
	{
		str.Format(_T("errno: %ld %s"),sqlca.sqlcode,(CString)(sqlca.sqlerrm.sqlerrmc));
		MessageBox(NULL,str,_T("prepare error"),0);
		return -1;
	}	
	EXEC SQL DECLARE cur_sp CURSOR FOR sqlconn;
	if(sqlca.sqlcode<0)
	{
		str.Format(_T("errno: %ld %s"),sqlca.sqlcode,(CString)(sqlca.sqlerrm.sqlerrmc));
		MessageBox(NULL,str,_T("declare cursor error"),0);
		return -1;
	}
	set_bind_v();
	EXEC SQL OPEN cur_sp USING DESCRIPTOR bind_dp;
	if(sqlca.sqlcode<0)
	{
		str.Format(_T("errno: %ld %s"),sqlca.sqlcode,(CString)(sqlca.sqlerrm.sqlerrmc));
		MessageBox(NULL,str,_T("open cursor error"),0);
		return -1;
	}
	set_select_v();
	str.Empty();
	CFile file;
	if(!file.Open("d:\\aooo.txt",CFile::modeReadWrite|CFile::modeCreate))
	{
		sql_error("open file error");
	}
	while(1)
	{
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL FETCH cur_sp USING DESCRIPTOR select_dp;
		if(sqlca.sqlcode<0)
		{//-1405 允许空的列值
			if(sqlca.sqlcode!=-1405)
			{
				str.Format(_T("errno: %ld %s"),sqlca.sqlcode,(CString)(sqlca.sqlerrm.sqlerrmc));
				MessageBox(NULL,str,"ora02.dll",0);
				break;	
			}
		}
		memset((void*)&mm,0,sizeof(mm));
		j=0;
		for(i=0;i<select_dp->F;i++)
		{
			str.Format("%s\t",select_dp->V[i]);
			if((j+str.GetLength())>4096)
				sql_error("too long!!");
			memcpy((char*)&mm[j],str.GetBuffer(0),str.GetLength());
			j+=str.GetLength();						
		}
		mm[j-1]=0xd;mm[j]=0xa;
		file.Write(mm,j+1);
	}
	file.Close();
	if(str.IsEmpty())
	{MessageBox(NULL,"ooooo","aaa",0);}
	free_dp();
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL CLOSE cur_sp;
	EXEC SQL COMMIT WORK RELEASE;
	return 0;
};
int alloc_desc(int size,int max_vname_len,int max_iname_len)
{
	int i;
	if((bind_dp=SQLSQLDAAlloc(0,size,max_vname_len,max_iname_len)) == (SQLDA *)0)
	{
		return 1;
	}
	bind_dp->N =MAX_ITEMS;
	if((select_dp=SQLSQLDAAlloc(SQL_SINGLE_RCTX,size,max_vname_len,max_iname_len)) == (SQLDA*)0)
	{
		return 1; //error
	}
	select_dp->N = MAX_ITEMS;
	for(i=0;i<MAX_ITEMS;i++)
	{
		bind_dp->I[i]	= (short *)malloc(sizeof(short));
		bind_dp->V[i]	= (char *)malloc(sizeof(char));
		select_dp->I[i] = (short *)malloc(sizeof(short));
		select_dp->V[i] = (char *)malloc(1);
	}
	return 0;
};
void set_bind_v()
{
	int i;
	EXEC SQL WHENEVER SQLERROR DO sql_error("set_select_v");
	EXEC SQL DESCRIBE BIND VARIABLES FOR sqlconn INTO bind_dp;
	if(bind_dp->F<0)
	{
		MessageBox(NULL,"columns is too long","err",0);
		return;
	}
	bind_dp->N = bind_dp->F;
	for(i=0;i<bind_dp->N;i++)
	{
		bind_dp->T[i]=1;
	}
};
void set_select_v()
{
	int i,null_ok,precision,scale;
	EXEC SQL WHENEVER SQLERROR DO sql_error("set_select_v");
	EXEC SQL DESCRIBE SELECT LIST FOR sqlconn INTO select_dp;
	if(select_dp->F<0)
	{
		MessageBox(NULL,"columnsaaaa is too long","err",0);
		return;		
	}
	select_dp->N = select_dp->F;
	for(i=0;i<select_dp->F;i++)
	{
//		SQLColumnNullCheck((unsigned short *)&(select_dp->T[i]), (unsigned short *)&(select_dp->T[i]), &null_ok);
		sqlnul((unsigned short *)&(select_dp->T[i]), (unsigned short *)&(select_dp->T[i]), &null_ok);	
		switch(select_dp->T[i])
		{
		case 1:	//char	type
			break;
		case 2: //number type
		    sqlprc((unsigned int *)&(select_dp->L[i]), &precision, &scale);
			//SQLNumberPrecV6( SQL_SINGLE_RCTX,(unsigned long *)&(select_dp->L[i]), &precision, &scale);
		    if (precision == 0) 
			 	precision = 40;

   	        if (scale > 0)//转换数字类型为浮点型
	           select_dp->L[i] = sizeof(float);
	        else//否则为整型
	            select_dp->L[i] = sizeof(int);
	        break;
	    case  8 : /* LONG datatype */
	        select_dp->L[i] = 240;
	        break;
	    case 11 : /* ROWID datatype */
	        select_dp->L[i] = 18;
	      break;
	   case 12 : /* DATE datatype */
	       select_dp->L[i] = 9;
	       break;
	   case 23 : /* RAW datatype */
	       break;
	   case 24 : /* LONG RAW datatype */
	      select_dp->L[i] = 240;
	      break;
		};
//	  if (select_dp->T[i] != 2)
//	      select_dp->V[i] = (char *) realloc(select_dp->V[i],select_dp->L[i] + 1);  
//	  else
//	       select_dp->V[i] = (char *) realloc(select_dp->V[i],select_dp->L[i]);
//	  if (select_dp->T[i] != 24 && select_dp->T[i] != 2)
//	      select_dp->T[i] = 1;
	      /* Coerce the datatypes of NUMBERs to float or int depending on
        the scale. */
//	  if (select_dp->T[i] == 2)
//	      if (scale > 0)
//	         select_dp->T[i] = 4;  /* float */
//		  else
//             select_dp->T[i] = 3;  /* int */
	select_dp->V[i] = (char *)realloc(select_dp->V[i], select_dp->L[i]+1);
 	select_dp->V[i][select_dp->L[i]] =0;//加上终止符
	select_dp->T[i] = 1;//把所有类型转换为字符型
	}
};
